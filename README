
-----------------------------------Intro--------------------------------------------

  This is a program that generates graphs regarding the spread of the recent
virus that has been reported on more than almost any other subject that involves
statistical analysis. It consists of 3 python files and 2 text files. The bar graph
portrays the number of new cases plotted against time (represented in days)

  The 3 python files accomplish rendering the graphs, reading the files and
interacting with the user. The 2 text files are meant to hold the data the app
will crunch and settings that could be updated to bring further functionality

-------------------------Information for the user-----------------------------------

  In order to use the app, the executable must be in the same folder as its icon,
a file named data and a file named settings. If instead direct use of the python
file is required, all the files and the icon must be in one folder and the
Interface.py file must be compiled and run (see Techincal Details for the full list
of files)

  Upon opening the executable, the user will be prompted with a small window with 3
buttons. This menu is meant to help with the colour selection. AT LEAST ONE COLOUR
MUST BE PICKED! Pressing the add colour button will open a standard colour chooser.
Unfortunately, due to technical limitation, in order for even a single colour to be
removed from the selection, all colours must be deleted by pressing the "Reset"
button. Upon pressing the "Generate" button, a new resizeable window will popup 
showing the result. Note: Changing the colour selection and pressing "Generate"
while a graph already exists will not create a new one but it will update the
already existing one.

  The data file must be filled in before using the application. It must have a
certain structure: showing a date, followed by ":" and the data point for that date.
This is how every line should look (date:number). Note, the dates won't be organised
and time will simply be laid out as the app reads the file from top to bottom.

  The settings file currently does have some very limited functionality. Currently
it has to contain two lines: the first one must say "Days:" followed by a number
without any spaces and the second one must contain "Display:days". The number will
force the app to only take into account the past x days, allowing for the database
to be as big as needed.

----------------------------Technical Details---------------------------------------

  At the heart of this operation lies the Render.py file. This uses matplotlib
to render one graph that can have multiple colours. Note it contains two useless
variables called Days and Display. They could be used in the future to add further
functionality, such as switching between days and weeks on the time axis of the
graph. Apart from that, the project awaits two arrays, one consisting of dates,
and the other of the number of new cases for each date. It also waits for an array
of colours which then uses to split the other two data-driven arrays into somewhat
equal chunks that when plotted together form a graph that shows alternating
colour

  The second project file, Graph_Constructor.py, compiles the data from the data
file and sets up the variables from the settings file and passes them to the
Render.py file. It also adjusts the number in the Days variable to be easier
to use with Python's lists to accomplish its job.

  The third and fie, Interface.py, uses TKinter to create a popup menu to help
the user pick a colour and generate the actual result. This is also the file
that needs to be compiled in order to run the app. The executable version was
also generated using this file as the main source.
